package apps.mrosystem.view;

import java.util.Date;
import java.util.List;

import apps.mrosystem.controller.CalendarHandler;
import apps.mrosystem.domain.User;
import apps.mrosystem.utils.Utils;

import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.Widget;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Button;
import com.vaadin.ui.Calendar;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.components.calendar.CalendarComponentEvents.EventClick;
import com.vaadin.ui.components.calendar.event.BasicEvent;
import com.vaadin.ui.components.calendar.event.CalendarEvent;
import com.vaadin.ui.components.calendar.event.CalendarEvent.EventChangeListener;
import com.vaadin.ui.components.calendar.event.CalendarEventProvider;
import com.vaadin.ui.components.calendar.event.CalendarEvent.EventChangeEvent;
import com.vaadin.ui.themes.ValoTheme;

public class CalendarView extends CustomComponent implements View{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public static final String NAME = "CALENDAR";
	
	private HorizontalLayout mainContentContainer;
	
	@AutoGenerated
	private HorizontalLayout mainLayout;

	private SidePanel sidePanel;
	
	private Label testLabel;
	private String[] authorisedUsers = new String[]{"Admin","Technician"};

	private User userData;

	private CalendarHandler handler;

	private TabSheet tabSheet;

	private TabSheet calendarTab;

	private VerticalLayout calendarContainer;

	private Calendar calendar;

	private HorizontalLayout calendarControl;

	private CssLayout calendarViewModeGroup;

	private AbstractComponent dayViewButton;

	private Button weekViewButton;

	private Button monthViewButton;

	private ComboBox calendarViewModeCombo;

	public CalendarView() {

	}
	
	
	private HorizontalLayout unauthorisedAccess() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		setWidth("100.0%");
		setHeight("100.0%");
		
		sidePanel = new SidePanel();
		sidePanel.setActiveButton(NAME);
		sidePanel.setImmediate(false);
		sidePanel.setWidth("160px");
		sidePanel.setHeight("100.0%");
		mainLayout.addComponent(sidePanel);
		
		mainContentContainer = new HorizontalLayout();
		mainContentContainer.setImmediate(false);
		mainContentContainer.setWidth("100.0%");
		mainContentContainer.setHeight("100.0%");
		mainContentContainer.setMargin(false);
		
		Label unauthorisedLabel = new Label();
		unauthorisedLabel.setImmediate(false);
		unauthorisedLabel.setWidth("-1px");
		unauthorisedLabel.setHeight("-1px");
		unauthorisedLabel.setValue("UNAUTHORISED ACCESS. You do not have access to view this page.");
		mainContentContainer.addComponent(unauthorisedLabel);
		
		mainLayout.addComponent(mainContentContainer);
		
		mainLayout.setExpandRatio(mainContentContainer, 1.0f);
		
		return mainLayout;
	}


	public void enter(ViewChangeEvent event) {
		userData = (User) VaadinSession.getCurrent().getAttribute("userData");
		if(userData != null){
			if(userData.isAuthorised(authorisedUsers)){
				buildMainLayout();
				handler.init();
			}
			else{
				unauthorisedAccess();
			}
			
			setCompositionRoot(mainLayout);
		}
		
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// sidePanel
		sidePanel = new SidePanel();
		sidePanel.setActiveButton(NAME);
		sidePanel.setImmediate(false);
		sidePanel.setWidth("160px");
		sidePanel.setHeight("100.0%");
		mainLayout.addComponent(sidePanel);
		
		// mainContentContainer
		mainContentContainer = buildMainContentContainer();
		mainLayout.addComponent(mainContentContainer);
		
		mainLayout.setExpandRatio(mainContentContainer, 1.0f);
		
		return mainLayout;
	}

	private HorizontalLayout buildMainContentContainer() {
		mainContentContainer = new HorizontalLayout();
		mainContentContainer.setImmediate(false);
		mainContentContainer.setWidth("100.0%");
		mainContentContainer.setHeight("100.0%");
		mainContentContainer.setMargin(false);
				
		tabSheet = new TabSheet();
		tabSheet.setHeight(100.0f, Unit.PERCENTAGE);
		tabSheet.addStyleName(ValoTheme.TABSHEET_PADDED_TABBAR);
		
		
		calendarTab = buildCalendarTab();
						
		tabSheet.addTab(calendarTab, "Calendar", FontAwesome.TABLE);

		mainContentContainer.addComponent(tabSheet);
		
		return mainContentContainer;
	}

	private TabSheet buildCalendarTab() {
		calendarTab = new TabSheet();
		
		calendarContainer = new VerticalLayout();
		calendarContainer.setWidth(100f,Unit.PERCENTAGE);
		calendarContainer.setHeight(100f,Unit.PERCENTAGE);
		
		calendarControl = buildCalendarControl();
		calendarContainer.addComponent(calendarControl);
		calendarContainer.setExpandRatio(calendarControl, 1f);
		
		calendar = buildCalendar();
		calendarContainer.addComponent(calendar);
		calendarContainer.setExpandRatio(calendar, 4f);

		
		calendarTab.addComponent(calendarContainer);
		
		return calendarTab;
	}


	private HorizontalLayout buildCalendarControl() {
		calendarControl = new HorizontalLayout();
		calendarControl.setWidth(100f,Unit.PERCENTAGE);
		calendarControl.setHeight(100f,Unit.PERCENTAGE);
		
		calendarViewModeCombo = new ComboBox();
		calendarViewModeCombo.setCaption("View");
		calendarViewModeCombo.addItem("Day");
		calendarViewModeCombo.addItem("Week");
		calendarViewModeCombo.addItem("Month");
		calendarViewModeCombo.select("Day");
		calendarViewModeCombo.addStyleName("borderless");
		calendarViewModeCombo.addStyleName("tiny");
		calendarViewModeCombo.setNullSelectionAllowed(false);
		
		calendarViewModeCombo.addValueChangeListener(new ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				if(event.getProperty().getValue().equals("Day")){
					setCalendarDayView();
				}else if(event.getProperty().getValue().equals("Week")){
					setCalendarWeekView();

				}else if(event.getProperty().getValue().equals("Month")){
					setCalendarMonthView();

				}
			}
		});
		
		calendarControl.addComponent(calendarViewModeCombo);
		
		return calendarControl;
	}


	protected void setCalendarMonthView() {
		Date date = new Date();
		date.setMinutes(0);
		date.setSeconds(0);
		date.setHours(0);
		date.setDate(0);
		calendar.setStartDate(date);
		calendar.setEndDate(Utils.addDaysToDate(date, 30));
		
	}


	protected void setCalendarWeekView() {
		Date date = new Date();
		date.setMinutes(0);
		date.setSeconds(0);
		date.setHours(0);
		calendar.setStartDate(date);
		calendar.setEndDate(Utils.addDaysToDate(date, 7));

		
	}


	protected void setCalendarDayView() {
		Date date = new Date();
		date.setMinutes(0);
		date.setSeconds(0);
		date.setHours(0);
		calendar.setStartDate(date);
		calendar.setEndDate(Utils.addHoursToDate(date, 23));		
	}


	private Calendar buildCalendar() {
		calendar = new Calendar();
		BasicEvent calendarEvent = new BasicEvent("TEST","TEEEEEST",new Date(), Utils.addHoursToDate(new Date(), 2));
		calendarEvent.addEventChangeListener(new EventChangeListener() {
			
			@Override
			public void eventChange(EventChangeEvent eventChangeEvent) {
				System.out.println(eventChangeEvent.getCalendarEvent());
				
			}
		});
		
		calendar.addEvent(calendarEvent);
		calendar.setWidth(100f, Unit.PERCENTAGE);
		calendar.setHeight(100f, Unit.PERCENTAGE);				
		return calendar;
	}


	public void setHandler(CalendarHandler calendarHandler) {
		this.handler = calendarHandler;
		
	}


	public String getName() {
		// TODO Auto-generated method stub
		return NAME;
	}

}
