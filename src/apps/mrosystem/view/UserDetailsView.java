package apps.mrosystem.view;

import java.util.ArrayList;
import java.util.HashMap;

import org.vaadin.dialogs.ConfirmDialog;

import apps.mrosystem.controller.UserDetailsHandler;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.LayoutEvents.LayoutClickEvent;
import com.vaadin.event.LayoutEvents.LayoutClickListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Page;
import com.vaadin.server.Resource;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.Position;
import com.vaadin.ui.AbstractField;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.ProgressBar;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;

public class UserDetailsView extends Window{

	@AutoGenerated
	private UserDetailsHandler userDetailsHandler;
	private VerticalLayout mainLayout;
	private TabSheet userProfileTabSheet;
	private VerticalLayout profilePictureControlLayout;
	private Image profilePicture;
	private Button editProfilePictureButton;
	private FormLayout userDetailsLayout;
	private Label userDetailsLabel;
	private TextField firstNameTextField;
	private TextField lastNameTextField;
	private ComboBox titleComboBox;
	private Label contactDetailsLabel;
	private OptionGroup genderOptionGroup;
	private TextField aliasTextField;
	private TextField emailTextField;
	private ComboBox locationComboBox;
	private TextField phoneTextField;
	private HorizontalLayout footer;
	private Label passwordLabel;
	private PasswordField currentPasswordTextField;
	private PasswordField newPasswordTextField;
	private PasswordField confirmPasswordTextField;
	private ArrayList<AbstractField> components;
	private ArrayList<String> oldValues;
	private ProgressBar waiting;
	
	
	public UserDetailsView() {

	}
	
	public void enter(ViewChangeEvent event){
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
				
		mainLayout = new VerticalLayout();
		mainLayout.setSizeFull();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// userProfileTabSheet
		userProfileTabSheet = buildUserProfileTabSheet();
		footer = buildFooter();
		mainLayout.addComponent(userProfileTabSheet);
		mainLayout.setExpandRatio(userProfileTabSheet, 1f);
		mainLayout.addComponent(footer);
		
		return mainLayout;
	}


	@AutoGenerated
	private TabSheet buildUserProfileTabSheet() {
		// common part: create layout
		userProfileTabSheet = new TabSheet();
		userProfileTabSheet.setSizeFull();

		userProfileTabSheet.addStyleName(ValoTheme.TABSHEET_EQUAL_WIDTH_TABS);
		
		// profileLayout
		userProfileTabSheet.addTab(buildProfileTab());
		
		//preferencesLayout
		userProfileTabSheet.addTab(buildPreferencesTab());
		
		return userProfileTabSheet;
	}
	
	private VerticalLayout buildPreferencesTab(){
		// prefLayout
		VerticalLayout prefLayout = new VerticalLayout();
		prefLayout.setImmediate(false);
		prefLayout.setWidth("100.0%");
		prefLayout.setCaption("Preferences");
		prefLayout.setIcon(FontAwesome.COGS);
		
		return prefLayout;
		
		
	}
	
	private HorizontalLayout buildProfileTab(){

		HorizontalLayout profileLayout = new HorizontalLayout();
		profileLayout.setCaption("Profile");
		profileLayout.setIcon(FontAwesome.USER);
		profileLayout.setWidth(100.0f, Unit.PERCENTAGE);
		profileLayout.setSpacing(true);
		profileLayout.setMargin(true);
		profileLayout.addStyleName("padding-small");		
		profileLayout.addStyleName("profile-form");		
		
		profileLayout.addComponent(buildProfilePictureControlLayout());
		//profileLayout.setExpandRatio(profilePictureControlLayout, (float) 1.0);
		
		profileLayout.addComponent(buildUserDetailsLayout());
		profileLayout.setExpandRatio(userDetailsLayout,1);
				
		return profileLayout;
	}
	
	@AutoGenerated
	private VerticalLayout buildProfilePictureControlLayout() {
		// common part: create layout
		profilePictureControlLayout = new VerticalLayout();
		profilePictureControlLayout.setSizeUndefined();
		profilePictureControlLayout.setWidth(100.0f, Unit.PIXELS);
		profilePictureControlLayout.setSpacing(true);
		
		// profilePicture

		Resource image = new ThemeResource(userDetailsHandler.getUser().getProfileImg());
		profilePicture = new Image(null,image);
		profilePicture.addStyleName("profile-picture");
		profilePictureControlLayout.addComponent(profilePicture);
		
		// editProfilePictureButton
		editProfilePictureButton = new Button();
		editProfilePictureButton.setCaption("Edit");
		editProfilePictureButton.setImmediate(true);
		editProfilePictureButton.setWidth("100.0%");
		profilePictureControlLayout.addComponent(editProfilePictureButton);
		
		return profilePictureControlLayout;
	}
	
	private class EditFieldClickListener implements LayoutClickListener{

			@Override
			public void layoutClick(LayoutClickEvent event) {
				Component clickedItem = event.getClickedComponent();
				if(event.isDoubleClick()){
					clickedItem.setEnabled(false);
					clickedItem.removeStyleName("readonly");
					
				}
				
			}
			
	
	};



	@AutoGenerated
	private FormLayout buildUserDetailsLayout() {
		// common part: create layout
		userDetailsLayout = new FormLayout();
		userDetailsLayout.addStyleName(ValoTheme.FORMLAYOUT_LIGHT);
		userDetailsLayout.addStyleName("padding-small");
		
		components = new ArrayList<AbstractField>();
		oldValues = new ArrayList<String>();
		
		// userDetailsLabel
		userDetailsLabel = new Label();
		userDetailsLabel.setImmediate(false);
		userDetailsLabel.setWidth("100.0%");
		userDetailsLabel.setValue("User Details");
		userDetailsLabel.addStyleName("heading1");
		userDetailsLabel.addStyleName("sub-window");
		userDetailsLayout.addComponent(userDetailsLabel);
		
		// firstNameTextField
		firstNameTextField = new TextField();
		firstNameTextField.setCaption("First Name");
		firstNameTextField.setImmediate(true);
		firstNameTextField.setWidth("100.0%");
		firstNameTextField.setEnabled(false);
		firstNameTextField.setValue(userDetailsHandler.getFirstName());
		firstNameTextField.addStyleName("readonly");
		firstNameTextField.addStyleName("sub-window");
		userDetailsLayout.addComponent(firstNameTextField);
		components.add(firstNameTextField);
		
		
		// lastNameTextField
		lastNameTextField = new TextField();
		lastNameTextField.setCaption("Last Name");
		lastNameTextField.setImmediate(false);
		lastNameTextField.setWidth("100.0%");
		lastNameTextField.setEnabled(false);
		lastNameTextField.setValue(userDetailsHandler.getSurname());
		lastNameTextField.addStyleName("readonly");
		lastNameTextField.addStyleName("sub-window");
		userDetailsLayout.addComponent(lastNameTextField);
		components.add(lastNameTextField);

		
		
		// aliasTextField
		aliasTextField = new TextField();
		aliasTextField.setCaption("Alias");
		aliasTextField.setImmediate(false);
		aliasTextField.setWidth("100.0%");
		aliasTextField.setEnabled(false);
		aliasTextField.addStyleName("readonly");
		aliasTextField.addStyleName("sub-window");
		aliasTextField.setValue(userDetailsHandler.getAlias());
		userDetailsLayout.addComponent(aliasTextField);
		components.add(aliasTextField);

		
		
		// titleComboBox
		titleComboBox = new ComboBox();
		titleComboBox.setCaption("Title");
		titleComboBox.setImmediate(false);
		titleComboBox.setWidth("100.0%");
		titleComboBox.setEnabled(false);
		titleComboBox.addItem("Mr");
		titleComboBox.addItem("Mrs");
		titleComboBox.addItem("Ms");
		titleComboBox.setValue(userDetailsHandler.getTitle());
		titleComboBox.addStyleName("readonly");
		titleComboBox.addStyleName("sub-window");
		userDetailsLayout.addComponent(titleComboBox);
		components.add(titleComboBox);

		
		
		// genderOptionGroup
		genderOptionGroup = new OptionGroup("Gender");
        genderOptionGroup.setEnabled(false);
        genderOptionGroup.addItem("m");
        genderOptionGroup.setItemCaption("m", "Male");
        genderOptionGroup.addItem("f");
        genderOptionGroup.setItemCaption("f", "Female");
        genderOptionGroup.addStyleName("horizontal");
        genderOptionGroup.addStyleName("readonly");
        genderOptionGroup.addStyleName("sub-window");
        genderOptionGroup.addStyleName(ValoTheme.BUTTON_SMALL);
        genderOptionGroup.setValue(userDetailsHandler.getGender());
        userDetailsLayout.addComponent(genderOptionGroup);
		components.add(genderOptionGroup);

        
        
		// contactDetailsLabel
		contactDetailsLabel = new Label();
		contactDetailsLabel.setImmediate(false);
		contactDetailsLabel.setWidth("100.0%");
		contactDetailsLabel.setValue("Contact Details");
		contactDetailsLabel.addStyleName("heading1");
		contactDetailsLabel.addStyleName("sub-window");
		userDetailsLayout.addComponent(contactDetailsLabel);
		
		
		// emailTextField
		emailTextField = new TextField();
		emailTextField.setCaption("Email");
		emailTextField.setImmediate(false);
		emailTextField.setWidth("100.0%");
		emailTextField.setEnabled(false);
		emailTextField.addStyleName("readonly");
		emailTextField.addStyleName("sub-window");
		emailTextField.setValue(userDetailsHandler.getEmail());
		userDetailsLayout.addComponent(emailTextField);
		components.add(emailTextField);

		
		
		// locationComboBox
		locationComboBox = new ComboBox();
		locationComboBox.setCaption("Location");
		locationComboBox.setImmediate(false);
		locationComboBox.setWidth("100.0%");
		locationComboBox.setEnabled(false);
		locationComboBox.addItem("UK");
		locationComboBox.addItem("USA");
		locationComboBox.setValue(userDetailsHandler.getLocation());
		//locationComboBox.setValue(locationComboBox.getVisibleItemIds());
		components.add(locationComboBox);
		
		
		locationComboBox.addStyleName("readonly");
		locationComboBox.addStyleName("sub-window");
		userDetailsLayout.addComponent(locationComboBox);
		
		
		// phoneTextField
		phoneTextField = new TextField();
		phoneTextField.setCaption("Phone");
		phoneTextField.setImmediate(false);
		phoneTextField.setWidth("100.0%");
		phoneTextField.setEnabled(false);
		phoneTextField.setValue(userDetailsHandler.getPhone());
		phoneTextField.addStyleName("readonly");
		phoneTextField.addStyleName("sub-window");
		userDetailsLayout.addComponent(phoneTextField);
		components.add(phoneTextField);

		
		
		// passwordLabel
		passwordLabel = new Label();
		passwordLabel.setImmediate(false);
		passwordLabel.setWidth("100.0%");
		passwordLabel.setValue("Change password");
		passwordLabel.addStyleName("heading1");
		passwordLabel.addStyleName("sub-window");
		userDetailsLayout.addComponent(passwordLabel);
		
		
		// currentPasswordTextField
		
		currentPasswordTextField = new PasswordField();
		currentPasswordTextField.setCaption("Current Password");
		currentPasswordTextField.setImmediate(false);
		currentPasswordTextField.setWidth("100.0%");
		currentPasswordTextField.setEnabled(false);
		currentPasswordTextField.addStyleName("readonly");
		currentPasswordTextField.addStyleName("sub-window");
		userDetailsLayout.addComponent(currentPasswordTextField);
		components.add(currentPasswordTextField);

		
		
		newPasswordTextField = new PasswordField();
		newPasswordTextField.setCaption("New password");
		newPasswordTextField.setImmediate(false);
		newPasswordTextField.setWidth("100.0%");
		newPasswordTextField.setEnabled(false);
		newPasswordTextField.addStyleName("readonly");
		newPasswordTextField.addStyleName("sub-window");
		userDetailsLayout.addComponent(newPasswordTextField);
		components.add(newPasswordTextField);

		
		
		confirmPasswordTextField = new PasswordField();
		confirmPasswordTextField.setCaption("Confirm new password");
		confirmPasswordTextField.setImmediate(false);
		confirmPasswordTextField.setWidth("100.0%");
		confirmPasswordTextField.setEnabled(false);
		confirmPasswordTextField.addStyleName("readonly");
		confirmPasswordTextField.addStyleName("sub-window");
		userDetailsLayout.addComponent(confirmPasswordTextField);
		components.add(confirmPasswordTextField);

			
		
		return userDetailsLayout;
	}
	
	
	private HorizontalLayout buildFooter() {
        HorizontalLayout footer = new HorizontalLayout();
        footer.addStyleName(ValoTheme.WINDOW_BOTTOM_TOOLBAR);
        footer.setWidth(100.0f, Unit.PERCENTAGE);
        
        
        CssLayout group = new CssLayout();
        group.addStyleName("v-component-group");
        footer.addComponent(group);
        
        final Button save = new Button("Save");
        final Button edit = new Button("Edit");
        final Button cancel = new Button("Revert");
        
        cancel.setEnabled(false);
        save.setEnabled(false);

        
        save.focus();
        group.addComponent(edit);
        group.addComponent(cancel);
        group.addComponent(save);
        
        
        
        waiting = new ProgressBar();
        waiting.setIndeterminate(true);
        footer.addComponent(waiting);
        waiting.setVisible(false);

        //footer.setComponentAlignment(waiting, Alignment.BOTTOM_LEFT);
        
        footer.setComponentAlignment(group, Alignment.BOTTOM_LEFT);
        
        
        edit.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				edit.setEnabled(false);
				save.setEnabled(true);
				cancel.setEnabled(true);
				oldValues.clear();
				for(AbstractField compontent : components){
					oldValues.add((String) compontent.getValue());
					compontent.removeStyleName("readonly");
					compontent.setEnabled(true);
				}
				
				oldValues = (ArrayList<String>) oldValues.clone();
								
			}
		});
        
        save.addStyleName(ValoTheme.BUTTON_PRIMARY);
        save.addClickListener(new ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
            	HashMap<String, String> newValues = new HashMap<String, String>();
            	
				for(AbstractField component : components){
					component.addStyleName("readonly");
					component.setEnabled(false);
				}
				
				newValues.put("id", userDetailsHandler.getUserId());
				newValues.put("firstname", firstNameTextField.getValue());
				newValues.put("lastname", lastNameTextField.getValue());
				newValues.put("alias", aliasTextField.getValue());
				newValues.put("title", titleComboBox.getValue().toString());
				newValues.put("gender", genderOptionGroup.getValue().toString());
				newValues.put("email", emailTextField.getValue());
				newValues.put("location", locationComboBox.getValue().toString());
				newValues.put("phone", phoneTextField.getValue());
				newValues.put("password", newPasswordTextField.getValue());
				
				
				edit.setEnabled(true);
				save.setEnabled(false);
				cancel.setEnabled(false);
				
				
		        waiting.removeStyleName("invisible");
		        waiting.addStyleName("visible");
				
				
				userDetailsHandler.updateProfile(newValues);



            }
        });
        
        
        cancel.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				
				ConfirmDialog.show(UI.getCurrent(), "Please Confirm", "Are you sure you wish to cancel changes?",
				        "I am", "Not quite", new ConfirmDialog.Listener() {

				            public void onClose(ConfirmDialog dialog) {
				                if (dialog.isConfirmed()) {
				    				for(AbstractField component : components){
				    					component.addStyleName("readonly");
				    					component.setEnabled(false);
				    				}

				    				edit.setEnabled(true);
				    				save.setEnabled(false);
				    				cancel.setEnabled(false);
				    				
				    				int i = 0;
				    				for(AbstractField component : components){
				    					component.setValue(oldValues.get(i));
				    					i++;
				    				}
				                    
				                }
				            }
				        });
				
				
			}
		});
        
        return footer;
	}

	protected void setWaitingIndicator(boolean val) {
		this.waiting.setVisible(val);

		
	}

	public void updateSuccess(){
		
        waiting.setVisible(false);

        Notification success = new Notification(
		        "Profile updated successfully");
        success.setDelayMsec(5000);
		success.setStyleName("bar success small");
		success.setPosition(Position.BOTTOM_LEFT);
		success.show(Page.getCurrent());
	}
	
	public void updateFailed(){
		
        waiting.setVisible(false);

		
        Notification fail = new Notification(
		        "Could not update profile");
        fail.setDelayMsec(5000);
        fail.setStyleName("bar failure small");
        fail.setPosition(Position.BOTTOM_LEFT);
        fail.show(Page.getCurrent());
	}

	
	public void show(){
		buildMainLayout();
		setCaption("User profile");
        addStyleName("profile-window");
		setHeight("500px");
		setWidth("670px");
		setPositionX(200);
		setPositionY(50);
		setClosable(true);
		setModal(true);
		setContent(mainLayout);
		
		addCloseListener(new Window.CloseListener() {
			
			@Override
			public void windowClose(CloseEvent e) {
				e.getWindow().close();
				UI.getCurrent().removeWindow(e.getWindow());
			}
		});
		UI.getCurrent().addWindow(this);
	}

	public void setHandler(UserDetailsHandler userDetailsHandler) {
		this.userDetailsHandler = userDetailsHandler;
		
	}


}
