package apps.mrosystem.view;



import java.util.Calendar;
import java.util.Date;

import org.vaadin.dialogs.ConfirmDialog;
import org.vaadin.risto.stepper.IntStepper;

import apps.mrosystem.controller.PurchaseAssetHandler;
import apps.mrosystem.domain.User;
import apps.mrosystem.domain.WarehouseLocation;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.event.FieldEvents.FocusEvent;
import com.vaadin.event.FieldEvents.FocusListener;
import com.vaadin.server.Page;
import com.vaadin.server.UserError;
import com.vaadin.shared.Position;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.Notification;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.ProgressBar;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;



public class PurchaseAssetView extends Window{
	private VerticalLayout mainLayout;
	private PurchaseAssetHandler handler;
	private HorizontalLayout footer;
	private VerticalLayout mainContent;
	private ListSelect purchaseList;
	private HierarchicalContainer bomContainer;
	private IntStepper quantity;
	private User userData;
	private Window window;
	private ProgressBar waiting;
	private Button submit;
	private Button cancel;
	private ComboBox shipTo;
	private Label requester;
	private DateField shipDate;

	public PurchaseAssetView() {
		this.window = this;
	}
	
	public void setHandler(PurchaseAssetHandler handler){
		this.handler = handler;
	}
	
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
				
		mainLayout = new VerticalLayout();
		mainLayout.setSizeFull();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		setWidth("100.0%");
		setHeight("100.0%");
		
		mainContent = buildMainContent();
		footer = buildFooter();
		mainLayout.addComponent(mainContent);
		mainLayout.addComponent(footer);

		mainLayout.setExpandRatio(mainContent, 1f);
		

		
		return mainLayout;
	}
	
	public void setBomContainer(HierarchicalContainer container){
		lockUI();
		try {
			purchaseList.setContainerDataSource(container);
		} finally {
			unlockUI();
		}
	}
	
	private void unlockUI() {
		UI.getCurrent().getSession().getLockInstance().unlock();

		
	}

	private void lockUI() {
		UI.getCurrent().getSession().getLockInstance().lock();

		
	}

	private VerticalLayout buildMainContent(){
		VerticalLayout mainContent = new VerticalLayout();
		mainContent.setImmediate(false);
		mainContent.setMargin(true);
		mainContent.setWidth("100%");
		mainContent.addStyleName("padding-small");
		
		purchaseList = new ListSelect();
		purchaseList.setNullSelectionAllowed(false);
        purchaseList.setWidth(100.0f, Unit.PERCENTAGE);
	
   
        Label info = new Label("Request purchase order for the following items</br>");
        info.setContentMode(ContentMode.HTML);


		
        quantity = new IntStepper();
 		quantity.setValue(1);
 		quantity.setStepAmount(1);
 		quantity.setMaxValue(100);
 		quantity.setNullValueAllowed(false);
 		quantity.setMinValue(1);
 		
		shipTo = new ComboBox();
		shipTo.setCaption("Ship to:");
		shipTo.setImmediate(false);
		shipTo.addStyleName("small");
		shipTo.setNullSelectionAllowed(false);


		shipTo.setWidth("100.0%");
		shipTo.setEnabled(true);
		shipTo.addFocusListener(new FocusListener() {
			
			@Override
			public void focus(FocusEvent event) {
				shipTo.setComponentError(null);
				shipTo.setValidationVisible(false);
				
			}
		});
		
		shipTo.addBlurListener(new BlurListener() {
			

			@Override
			public void blur(BlurEvent event) {
				if(shipTo.getValue() == null){
					showShipToError();
				}
				
			}
		});
		
		
		shipDate = new PopupDateField();
		shipDate.setCaption("Date Required");
		shipDate.setWidth(100,Unit.PERCENTAGE);
        Calendar minDate = Calendar.getInstance();
        minDate.setTime(new Date());
        //shipDate.
        minDate.add(Calendar.DATE, 30);
		shipDate.setValue(minDate.getTime());
		
		
		shipDate.setRangeStart(minDate.getTime());
		shipDate.addStyleName("disabled-input");
		shipDate.setDateFormat("EEEE, d MMMM yyyy");
		
		requester = new Label();
 		requester.setCaption("Requester:");

		
        mainContent.addComponent(info);
        
        mainContent.addComponent(purchaseList);
		//mainContent.addComponent(quantity);
			
		//mainContent.setExpandRatio(purchaseList, 1f);
		
		mainContent.addComponent(shipTo);
		
		mainContent.addComponent(shipDate);
		
		mainContent.addComponent(requester);
		
		return mainContent;
		
	}
	
	public void setRequester(String user){
		requester.setValue(user);
	}
	
	public void setWarehouseLocations(Container container){
		shipTo.setContainerDataSource(container);
	}
	
	
	private HorizontalLayout buildFooter(){
        HorizontalLayout footer = new HorizontalLayout();
        footer.addStyleName(ValoTheme.WINDOW_BOTTOM_TOOLBAR);
        footer.setWidth(100.0f, Unit.PERCENTAGE);
        
        CssLayout buttonGroup = buildButtonGroup();
        
        
        waiting = new ProgressBar();
        waiting.setIndeterminate(true);
        waiting.setVisible(false);
        
       
        //waiting.setVisible(false);
        
        footer.addComponent(buttonGroup);

        footer.addComponent(waiting);

        return footer;
	}
	
    

	public void updateSucess(){
		lockUI();

		try {
			Notification success = new Notification("Request has been sent.");
			success.setDelayMsec(5000);
			success.setStyleName("bar success small");
			success.setPosition(Position.BOTTOM_CENTER);
			success.show(Page.getCurrent());

			closeAndRemoveWindow();
		} finally {
			unlockUI();
		}
		
	}

	public void updateFailed() {
		lockUI();
		try {
			Notification fail = new Notification("Failed to send request.");
			fail.setDelayMsec(5000);
			fail.setStyleName("bar fail small");
			fail.setPosition(Position.BOTTOM_CENTER);
			fail.show(Page.getCurrent());
			submit.setEnabled(true);
			cancel.setEnabled(true);
			waiting.setVisible(false);
		} finally {
			unlockUI();
		}
        
	}
	
	private CssLayout buildButtonGroup() {
		// TODO Auto-generated method stub
        
        CssLayout group = new CssLayout();
        group.addStyleName("v-component-group");
        
        submit = new Button("Submit");
        cancel = new Button("Cancel");

        
        submit.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				
				ConfirmDialog.show(UI.getCurrent(), "Please Confirm", "Are you sure you wish to submit a purchase request for the listed items?",
				        "I am", "Not quite", new ConfirmDialog.Listener() {

				            public void onClose(ConfirmDialog dialog) {
				                if (dialog.isConfirmed()) {

				                	handler.submitPurchaseRequest();

				                    
				                }
				            }
				        });
				
				
			}
		});
        
        
        cancel.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				closeAndRemoveWindow();

			}
		});
        

        group.addComponent(submit);
        group.addComponent(cancel);
        

        
        return group;
	}
	

	protected void closeAndRemoveWindow() {
		window.close();
		UI.getCurrent().removeWindow(window);
	}
	
	public void setWaiting(){
    	submit.setEnabled(false);
    	cancel.setEnabled(false);
    	waiting.setVisible(true);
	}

	
	public void setWindowCaption(String caption){
		lockUI();
		try {
			setCaption(caption);
		} finally {
			unlockUI();
		}

	}
	
	public void buildLayout(){
		buildMainLayout();
        addStyleName("profile-window");
		setHeight("500px");
		setWidth("670px");
		setPositionX(200);
		setPositionY(50);
		setClosable(true);
		setModal(true);
		setContent(mainLayout);
		
		addCloseListener(new Window.CloseListener() {
			
			@Override
			public void windowClose(CloseEvent e) {
				e.getWindow().close();
				UI.getCurrent().removeWindow(e.getWindow());

			}
		});
	}
	
	public void show() {
		
		if(mainLayout == null){
			buildMainLayout();
		}

		UI.getCurrent().addWindow(this);
		
	}

	public void showShipToError() {
		shipTo.setComponentError(new UserError("Please select a shipping location."));
	}
	
	public void showShipDateError(){
		shipDate.setComponentError(new UserError("Please select a shipping date."));
	}

	public WarehouseLocation getSelectedWarehouse() {
		// TODO Auto-generated method stub
		return (WarehouseLocation) shipTo.getValue();
	}

	public Date getShipDate() {
		// TODO Auto-generated method stub
		return shipDate.getValue();
	}

}

