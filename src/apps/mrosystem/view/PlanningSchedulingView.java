package apps.mrosystem.view;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;

import apps.mrosystem.domain.Job;
import apps.mrosystem.domain.Technician;
import apps.mrosystem.domain.User;
import apps.mrosystem.model.PlanningSchedulingModel;
import apps.mrosystem.utils.Utils;
import apps.mrosystem.components.*;
import apps.mrosystem.controller.PlanningSchedulingHandler;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.VaadinSession;
import com.vaadin.server.Sizeable.Unit;
import com.vaadin.tapio.googlemaps.GoogleMap;
import com.vaadin.tapio.googlemaps.client.LatLon;
import com.vaadin.tapio.googlemaps.client.events.MarkerClickListener;
import com.vaadin.tapio.googlemaps.client.overlays.GoogleMapMarker;
import com.vaadin.ui.Calendar;
//import com.vaadin.ui.Calendar;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TreeTable;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Table.TableDragMode;
import com.vaadin.ui.Tree.TreeDragMode;
import com.vaadin.ui.themes.ValoTheme;

import fi.jasoft.dragdroplayouts.client.ui.LayoutDragMode;
import fi.jasoft.dragdroplayouts.interfaces.DragFilter;


public class PlanningSchedulingView extends CustomComponent implements View{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public static final String NAME = "PLANNINGSCHEDULING";
	
	private HorizontalLayout mainContentContainer;
	
	@AutoGenerated
	private HorizontalLayout mainLayout;

	private SidePanel sidePanel;
	
	private Label testLabel;
	private String[] authorisedUsers = new String[]{"Admin","Planner","Management"};

	private User userData;

	private PlanningSchedulingHandler handler;

	private TabSheet tabSheet;

	private VerticalLayout schedulingTab;

	private VerticalLayout buildSchedulingTab;

	private HorizontalLayout mapComontent;

	private HorizontalLayout calendarCompontent;

	private VerticalLayout technicianView;

	private VerticalLayout workOrderView;

	private GoogleMap map;

	private TreeTable technicianTable;

	private TreeTable workOrderTable;

	private SchedulerComponent scheduler;

	public PlanningSchedulingView() {

	}
	
	
	private HorizontalLayout unauthorisedAccess() {
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		setWidth("100.0%");
		setHeight("100.0%");
		
		sidePanel = new SidePanel();
		sidePanel.setActiveButton(NAME);
		sidePanel.setImmediate(false);
		sidePanel.setWidth("160px");
		sidePanel.setHeight("100.0%");
		mainLayout.addComponent(sidePanel);
		
		mainContentContainer = new HorizontalLayout();
		mainContentContainer.setImmediate(false);
		mainContentContainer.setWidth("100.0%");
		mainContentContainer.setHeight("100.0%");
		mainContentContainer.setMargin(false);
		
		Label unauthorisedLabel = new Label();
		unauthorisedLabel.setImmediate(false);
		unauthorisedLabel.setWidth("-1px");
		unauthorisedLabel.setHeight("-1px");
		unauthorisedLabel.setValue("UNAUTHORISED ACCESS. You do not have access to view this page.");
		mainContentContainer.addComponent(unauthorisedLabel);
		
		mainLayout.addComponent(mainContentContainer);
		
		mainLayout.setExpandRatio(mainContentContainer, 1.0f);
		
		return mainLayout;
	}

	public void enter(ViewChangeEvent event) {
		userData = (User) VaadinSession.getCurrent().getAttribute("userData");
		if(userData != null){
			if(userData.isAuthorised(authorisedUsers)){
				buildMainLayout();
				handler.initTableData();

				
			}
			else{
				unauthorisedAccess();
			}
			
			setCompositionRoot(mainLayout);
		}		
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// sidePanel
		sidePanel = new SidePanel();
		sidePanel.setActiveButton(NAME);
		sidePanel.setImmediate(false);
		sidePanel.setWidth("160px");
		sidePanel.setHeight("100.0%");
		mainLayout.addComponent(sidePanel);
		
		// mainContentContainer
		mainContentContainer = buildMainContentContainer();
		mainLayout.addComponent(mainContentContainer);
		
		mainLayout.setExpandRatio(mainContentContainer, 1.0f);
		
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildMainContentContainer() {
		// common part: create layout
		mainContentContainer = new HorizontalLayout();
		mainContentContainer.setImmediate(false);
		mainContentContainer.setWidth("100.0%");
		mainContentContainer.setHeight("100.0%");
		mainContentContainer.setMargin(false);
		
		tabSheet = new TabSheet();
		tabSheet.setHeight(100.0f, Unit.PERCENTAGE);
/*			assetsTabSheet.addStyleName(ValoTheme.TABSHEET_FRAMED);*/
		tabSheet.addStyleName(ValoTheme.TABSHEET_PADDED_TABBAR);
		
		
		schedulingTab = buildSchedulingTab();
						
		tabSheet.addTab(schedulingTab, "Scheduling", FontAwesome.TABLE);

		
		mainContentContainer.addComponent(tabSheet);
		
		return mainContentContainer;
	}


	private VerticalLayout buildSchedulingTab() {
		schedulingTab = new VerticalLayout();
		schedulingTab.setWidth(100f, Unit.PERCENTAGE);
		schedulingTab.setHeight(100f, Unit.PERCENTAGE);
		
		calendarCompontent = buildCalendarCompontent();
		schedulingTab.addComponent(calendarCompontent);
		
		
		mapComontent = buildMapCompontent();
		schedulingTab.addComponent(mapComontent);
		
		
		return schedulingTab;
	}


	private HorizontalLayout buildMapCompontent() {
		mapComontent = new HorizontalLayout();
		mapComontent.setSizeFull();
		
		technicianView = buildTechnicianView();
		mapComontent.addComponent(technicianView);
		mapComontent.setExpandRatio(technicianView, 3);

		map = buildMap();
		mapComontent.addComponent(map);
		mapComontent.setExpandRatio(map, 8);

		workOrderView = buildWorkOrderView();
		mapComontent.addComponent(workOrderView);
		mapComontent.setExpandRatio(workOrderView, 3);

		
		return mapComontent;
	}


	

	private VerticalLayout buildTechnicianView() {
		technicianView = new VerticalLayout();
		technicianView.setWidth(100f, Unit.PERCENTAGE);
		technicianView.setHeight(100f, Unit.PERCENTAGE);
		
		technicianTable = new TreeTable();
		technicianTable.addStyleName("quiet");
		technicianTable.addStyleName("small");
		technicianTable.addStyleName("compact");
		technicianTable.addStyleName("no-vertical-lines");
		technicianTable.setSelectable(true);
		technicianTable.setMultiSelect(false);
		technicianTable.setImmediate(true);
		technicianTable.setColumnCollapsingAllowed(true);
		technicianTable.setWidth(100f, Unit.PERCENTAGE);
		technicianTable.setHeight(100f, Unit.PERCENTAGE);
		
		
		
		technicianView.addComponent(technicianTable);
		
		return technicianView;
	}
	
	public void setTechnicianTableDragMode(TableDragMode dragMode){
		technicianTable.setDragMode(dragMode);
	}
	public void setWorkOrderTableDragMode(TableDragMode dragMode){
		lockUI();
		try{
			workOrderTable.setDragMode(dragMode);
		}
		finally{
			unlockUI();
		}
	}
	
	public void setTechnicianTableDropHandler(DropHandler dropHandler){
		lockUI();
		try {
			technicianTable.setDropHandler(dropHandler);
		} finally {
			unlockUI();
		}
	}
	
	public void setWorkOrderDropHandler(DropHandler dropHandler){
		lockUI();
		try {
			workOrderTable.setDropHandler(dropHandler);
		} finally {
			unlockUI();
		}
	}
	
	
	private GoogleMap buildMap() {
		map = new GoogleMap("AIzaSyCOe-8GdvExrUOy8qzdoScoJhGRU8GYc8w", null, "english");
		map.setWidth(100f, Unit.PERCENTAGE);
		map.setHeight(100f, Unit.PERCENTAGE);
		return map;
	}

	public void setMapMarkerClickListener(MarkerClickListener listener){
		map.addMarkerClickListener(listener);
	}
	
	
	public void setMapCenter(LatLon center){
		map.setCenter(center);
		map.setZoom(15);
	}
	
	private VerticalLayout buildWorkOrderView() {
		workOrderView = new VerticalLayout();
		workOrderView.setWidth(100f, Unit.PERCENTAGE);
		workOrderView.setHeight(100f, Unit.PERCENTAGE);
		
		
		workOrderTable = new TreeTable();
		workOrderTable.addStyleName("quiet");
		workOrderTable.addStyleName("small");
		workOrderTable.addStyleName("compact");
		workOrderTable.addStyleName("no-vertical-lines");
		workOrderTable.setSelectable(true);
		workOrderTable.setMultiSelect(false);
		workOrderTable.setImmediate(true);
		workOrderTable.setColumnCollapsingAllowed(true);
		workOrderTable.setWidth(100f, Unit.PERCENTAGE);
		workOrderTable.setHeight(100f, Unit.PERCENTAGE);
		
		workOrderView.addComponent(workOrderTable);
		
		return workOrderView;
	}




	private HorizontalLayout buildCalendarCompontent() {
		calendarCompontent = new HorizontalLayout();
		calendarCompontent.setWidth(100f, Unit.PERCENTAGE);
		calendarCompontent.setHeight(100f, Unit.PERCENTAGE);
		
		scheduler = new SchedulerComponent();
		
		calendarCompontent.addComponent(scheduler);
		
		return calendarCompontent;
	}


	public String getName() {
		return NAME;
	}

	
	public void setTechnicianTableDataSource(HierarchicalContainer container){
		lockUI();
		try{
			technicianTable.setContainerDataSource(container);
		}finally{
			unlockUI();
		}
		
	}
	
	public void setWorkOrderTableDataSource(HierarchicalContainer container) {
		lockUI();
		try {
			workOrderTable.setContainerDataSource(container);
		} finally {
			unlockUI();
		}
	}

	public void setHandler(PlanningSchedulingHandler handler) {
		this.handler = handler;
		
	}


	public void setMapMarkers(ArrayList<GoogleMapMarker> mapMarkers) {
		for(GoogleMapMarker marker : mapMarkers){
			map.addMarker(marker);
		}
		
	}
	
	private void unlockUI() {
		UI.getCurrent().getSession().getLockInstance().unlock();

		
	}

	private void lockUI() {
		UI.getCurrent().getSession().getLockInstance().lock();

		
	}


	public void addTechnicianMapMarkers(ArrayList<CustomGoogleMapMarker> technicianMapMarkers) {
		for(GoogleMapMarker marker : technicianMapMarkers){
			map.addMarker(marker);
		}
		
	}


	public void addWorkOrderMapMarkers(ArrayList<CustomGoogleMapMarker> arrayList) {
		for(GoogleMapMarker marker : arrayList){
			map.addMarker(marker);
		}

	}


	public void setTechnicianTableItemClickListener(ItemClickListener listener) {
		technicianTable.addItemClickListener(listener );
		
	}


	public void setWorkOrderTableItemClickListener(ItemClickListener listener) {
		workOrderTable.addItemClickListener(listener);
	}


	public void setSchedulerDataProvider(PlanningSchedulingModel dataProvider) {
		scheduler.setDataProvider(dataProvider);
		
	}


}
