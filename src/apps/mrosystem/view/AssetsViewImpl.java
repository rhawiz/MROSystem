package apps.mrosystem.view;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;

import apps.mrosystem.controller.AssetDetailsHandler;
import apps.mrosystem.controller.AssetsHandler;
import apps.mrosystem.model.Part;
import apps.mrosystem.model.User;
import apps.mrosystem.utils.Utils;


















import com.google.gwt.dev.json.JsonArray;
import com.google.gwt.dev.json.JsonException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Container.Filter;
import com.vaadin.data.Container.ItemSetChangeEvent;
import com.vaadin.data.Container.ItemSetChangeListener;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.data.util.filter.And;
import com.vaadin.data.util.filter.Like;
import com.vaadin.data.util.filter.Or;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.Button;
import com.vaadin.ui.AbstractSelect.NewItemHandler;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.JavaScript;
import com.vaadin.ui.JavaScriptFunction;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;
import com.vaadin.ui.TreeTable;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.themes.ValoTheme;

public class AssetsViewImpl extends CustomComponent implements AssetsView{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public static final String NAME = "ASSETS";
	
	private GridLayout mainContentContainer;
	
	@AutoGenerated
	private HorizontalLayout mainLayout;

	private SidePanel sidePanel;
		
	private String[] authorisedUsers = new String[]{"Admin","Technician","Planner","Management","Customer"};

	private User userData;
	
	private Table assetsTable = new TreeTable();

	private TabSheet assetsTabSheet;

	private GridLayout assetsTableContainer;

	private CssLayout assetsTableControlContainer;

	private HorizontalSplitPanel assetsTableSplitPanel;

	private Tree assetsTableControlTree;

	private TextField assetsTableFilterTextField;
	
	private AssetsHandler assetsHandler;

	private OptionGroup assetsTableViewModeOptions;
	
	public AssetsViewImpl() {

	}
	
	
	private HorizontalLayout unauthorisedAccess() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		setWidth("100.0%");
		setHeight("100.0%");
		
		sidePanel = new SidePanel();
		sidePanel.setActiveButton(NAME);
		sidePanel.setImmediate(false);
		sidePanel.setWidth("160px");
		sidePanel.setHeight("100.0%");
		mainLayout.addComponent(sidePanel);
		
		mainContentContainer = new GridLayout();
		mainContentContainer.setImmediate(false);
		mainContentContainer.setWidth("100.0%");
		mainContentContainer.setHeight("100.0%");
		mainContentContainer.setMargin(false);
		mainContentContainer.setRows(2);
		
		Label unauthorisedLabel = new Label();
		unauthorisedLabel.setImmediate(false);
		unauthorisedLabel.setWidth("-1px");
		unauthorisedLabel.setHeight("-1px");
		unauthorisedLabel.setValue("UNAUTHORISED ACCESS. You do not have access to view this page.");
		mainContentContainer.addComponent(unauthorisedLabel, 0, 0);
		
		mainLayout.addComponent(mainContentContainer);
		
		mainLayout.setExpandRatio(mainContentContainer, 1.0f);
		
		return mainLayout;
	}


	public void enter(ViewChangeEvent event) {
		init();
	}
	
	public void init(){
		userData = (User) VaadinSession.getCurrent().getAttribute("userData");
		if(userData != null){
			if(userData.isAuthorised(authorisedUsers)){
				buildMainLayout();
				assetsHandler.initTableData();
				assetsHandler.setAssetsClassFilter();
				assetsHandler.setAssetsTableTopLevel();
			}
			else{
				unauthorisedAccess();
				
			}
			setCompositionRoot(mainLayout);
		}
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// sidePanel
		sidePanel = new SidePanel();
		sidePanel.setActiveButton(NAME);
		sidePanel.setImmediate(false);
		sidePanel.setWidth("160px");
		sidePanel.setHeight("100.0%");
		mainLayout.addComponent(sidePanel);

	 		// mainContentContainer
		mainContentContainer = buildMainContentContainer();
		mainLayout.addComponent(mainContentContainer);
		
		mainLayout.setExpandRatio(mainContentContainer, 1.0f);
		
		return mainLayout;
	}

protected Or classFilter;

protected Filter textFilter;

private Button clearFilterTextFieldButton;

private GridLayout bomView;
	@AutoGenerated
	private GridLayout buildMainContentContainer() {
		// common part: create layout
			
		assetsTable = new TreeTable();
		assetsTable.setSizeFull();
		assetsTable.setSelectable(true);
		assetsTable.setMultiSelect(true);
		assetsTable.setImmediate(true);
		assetsTable.addItemClickListener(new ItemClickListener() {
			
			@Override
			public void itemClick(ItemClickEvent event) {
		        if (event.isDoubleClick()){
		        	assetsHandler.getAssetInfoDialog((Part) event.getItemId());
		        }
	
			}
		});
		
		
		
		assetsTableContainer = new GridLayout();
		assetsTableContainer.setImmediate(false);
		assetsTableContainer.setWidth("100.0%");
		assetsTableContainer.setHeight("100.0%");
		assetsTableContainer.setMargin(false);
		assetsTableContainer.setRows(1);
		assetsTableContainer.addComponent(assetsTable,0,0);
		assetsTableContainer.setStyleName("padding-small");

		
		
		assetsTableFilterTextField = new TextField();
		assetsTableFilterTextField.setInputPrompt("Filter");
		assetsTableFilterTextField.setWidth("100%");
		assetsTableFilterTextField.addTextChangeListener(new TextChangeListener() {
			@Override
			public void textChange(TextChangeEvent event) {
				if(!event.getText().equals("")){
					removeAssetTableFilter(textFilter);
					textFilter = new Or(
							new SimpleStringFilter("Part Number", event.getText(),true, false),
							new SimpleStringFilter("Name", event.getText(),true, false),
							new SimpleStringFilter("Class", event.getText(),true, false),
							new SimpleStringFilter("Description", event.getText(),true, false)
								);
					addAssetTableFilter(textFilter);


				}else{
					removeAssetTableFilter(textFilter);
				}
				
			}
		});
		
/*        clearFilterTextFieldButton = new Button(null, new ClickListener() {
            @Override
            public void buttonClick(final ClickEvent event) {
            	assetsTableFilterTextField.setValue("");
            }
        });
        clearFilterTextFieldButton.setIcon(FontAwesome.TIMES_CIRCLE);
        clearFilterTextFieldButton.addStyleName("last");
        clearFilterTextFieldButton.addStyleName("small");
        clearFilterTextFieldButton.addStyleName("icon-only");*/

        
		assetsTableControlTree = new Tree("Class Filter");
		//assetsTableControlTree.setWidth("100%");
		assetsTableControlTree.setSizeFull();
		assetsTableControlTree.setMultiSelect(false);
		
		
		
		VerticalLayout assetsTableViewModeOptionsContainer = new VerticalLayout();
		
		assetsTableViewModeOptions = new OptionGroup("View mode");
		assetsTableViewModeOptions.setNullSelectionAllowed(false);
		assetsTableViewModeOptions.addItem("All");
		assetsTableViewModeOptions.addItem("Top Level");
		assetsTableViewModeOptions.addItem("Single Level");
		
		assetsTableViewModeOptions.select("Top Level");
		assetsTableViewModeOptionsContainer.addComponent(assetsTableViewModeOptions);

		
		assetsTableViewModeOptions.addValueChangeListener(new ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				if(event.getProperty().getValue().equals("All")){
					clearFilterText();
					assetsHandler.setAssetsTableAllAssets();
					assetsTableControlTree.select("All");
				}
				else if(event.getProperty().getValue().equals("Top Level")){
					clearFilterText();
					assetsHandler.setAssetsTableTopLevel();
					assetsTableControlTree.select("All");
					
				}else if(event.getProperty().getValue().equals("Single Level")){
					clearFilterText();
					assetsHandler.setAssetsTableSingleLevel();
					assetsTableControlTree.select("All");
				}				
			}
		});
		
		
		assetsTableControlContainer = new CssLayout();
		assetsTableControlContainer.addComponent(assetsTableFilterTextField);
		assetsTableControlContainer.addComponent(assetsTableViewModeOptionsContainer);
		assetsTableControlContainer.addComponent(assetsTableControlTree);
		
		assetsTableControlContainer.setStyleName("padding-small");
		
		
		assetsTableSplitPanel = new HorizontalSplitPanel();
		assetsTableSplitPanel.setSizeFull();
		assetsTableSplitPanel.setSplitPosition(11, Unit.PERCENTAGE);
		assetsTableSplitPanel.addComponent(assetsTableControlContainer);
		assetsTableSplitPanel.addComponent(assetsTableContainer);
		assetsTableSplitPanel.setMaxSplitPosition(11, Unit.PERCENTAGE);
		assetsTableSplitPanel.setStyleName("padding-small");


		
		assetsTabSheet = new TabSheet();
		assetsTabSheet.setHeight(100.0f, Unit.PERCENTAGE);
/*			assetsTabSheet.addStyleName(ValoTheme.TABSHEET_FRAMED);*/
		assetsTabSheet.addStyleName(ValoTheme.TABSHEET_PADDED_TABBAR);
		assetsTabSheet.addTab(assetsTableSplitPanel,"Table View");
		
		bomView = new GridLayout();
		
		
		assetsTabSheet.addTab(assetsTableSplitPanel,"Table View");
		assetsTabSheet.addTab(bomView,"BOM View");

		mainContentContainer = new GridLayout();
		mainContentContainer.setImmediate(false);
		mainContentContainer.setWidth("100.0%");
		mainContentContainer.setHeight("100.0%");
		mainContentContainer.setMargin(false);
		mainContentContainer.setRows(1);		
		mainContentContainer.addComponent(assetsTabSheet,0,0);

		
		return mainContentContainer;
	}
	
	public void removeAssetTableFilter(Filter filter) {
		((HierarchicalContainer) assetsTable.getContainerDataSource()).removeContainerFilter(filter);
	}


	public void clearFilterText(){
		assetsTableFilterTextField.setValue("");
		removeAllAssetTableFilters();
	}
	
	public void removeAllAssetTableFilters(){
		((HierarchicalContainer) assetsTable.getContainerDataSource()).removeAllContainerFilters();
	}
	
	public void addAssetTableFilter(Filter filter){
		HierarchicalContainer container = (HierarchicalContainer) assetsTable.getContainerDataSource();
		container.addContainerFilter(filter);
	}

	
	@Override
	public void setHandler(AssetsHandler handler) {
		assetsHandler = handler;
	}
	
	@Override
	public String getName(){
		return NAME;
	}
    
	
	public void setAssetsTableDataSource(HierarchicalContainer data){
		assetsTable.setContainerDataSource(data);
		
	}
	
	public View getView(){
		return this;
	}


	public void showAssetInformationWindow(AssetDetailsHandler assetDetailsHandler) {
		assetDetailsHandler.show();
		
	}
	


	public void setAssetsClassFilter(Container assetsClassFilter) {
		assetsTableControlTree.setContainerDataSource(assetsClassFilter);
		assetsTableControlTree.select(assetsTableControlTree.getItemIds().toArray()[0]);
		assetsTableControlTree.addItemClickListener(new ItemClickListener() {
			

			@Override
			public void itemClick(ItemClickEvent event) {
				if(assetsTableControlTree.isSelected(event.getItemId())){
					assetsTableControlTree.select(assetsTableControlTree.getItemIds().toArray()[0]);
					//clearAssetTableFilters();
				}
				else if(event.getItemId() == "All"){
					removeAllAssetTableFilters();
				}
				else{
					classFilter = new Or(new SimpleStringFilter("Class", (String) event.getItemId(),true, false));	
					clearFilterText();
					addAssetTableFilter(classFilter);
				}
				
				
			}
		});
	}
	
	public User getCurrentUser(){
		return (User) VaadinSession.getCurrent().getAttribute("userData");
	}


	public void showWarning(String caption, String message) {
		new Notification(caption, message,Notification.Type.WARNING_MESSAGE);
		
	}
	
	public static String getBomTreeGraphics(){
		return "<button onclick='apps.mrosystem.exampleCallback(new Date())'>"
                + "Click me </button>";
	}


}
