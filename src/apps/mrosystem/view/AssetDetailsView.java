package apps.mrosystem.view;

import java.util.ArrayList;
import java.util.HashMap;

import apps.mrosystem.controller.AssetDetailsHandler;
import apps.mrosystem.model.Assets;
import apps.mrosystem.model.Attribute;
import apps.mrosystem.model.Part;
import apps.mrosystem.model.User;
import apps.mrosystem.utils.Utils;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinSession;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;

public class AssetDetailsView extends CustomComponent {

	@AutoGenerated
	private TabSheet mainLayout;
	private Part part;
	private HashMap<String, Attribute> assetInfo;
	private ArrayList<TextField> infoTextFieldArray;
	private User currentUser;
	private String heading;
	private String[] editPermissions = new String[]{"Admin","Planner"};
	private ArrayList<String> oldInfoTextFieldValuesArray = new ArrayList<String>();
	private AssetDetailsHandler assetDetailsHandler;

	public AssetDetailsView(Part part) {
		this.part = part;
		currentUser = (User) VaadinSession.getCurrent().getAttribute("userData");
		// TODO add user code here
	}
	
	public void enter(ViewChangeEvent event){
		
	}

	@AutoGenerated
	private void buildMainLayout() {
		
		TabSheet assetInfoWindowTabSheet = new TabSheet();
		assetInfoWindowTabSheet.addStyleName("equal-width-tabs");
		assetInfoWindowTabSheet.setHeight(100.0f, Unit.PERCENTAGE);
/*			assetsTabSheet.addStyleName(ValoTheme.TABSHEET_FRAMED);*/
		assetInfoWindowTabSheet.addStyleName(ValoTheme.TABSHEET_PADDED_TABBAR);
		
		
		GridLayout assetInfoGridLayout = new GridLayout();
		assetInfoGridLayout.setImmediate(false);
		assetInfoGridLayout.setMargin(false);
		assetInfoGridLayout.addStyleName("padding-small");
		
		heading = part.getName() + " (" + part.getPartNo() + ")";
		
		Label assetInformationLabel = new Label("Information");
		assetInformationLabel.addStyleName("sub-window");
		assetInformationLabel.addStyleName("heading1");
		
		assetInfoGridLayout.addComponent(assetInformationLabel);
		
		FormLayout imageContainer = new FormLayout();
		
		HorizontalLayout initialRow = new HorizontalLayout();
		initialRow.setImmediate(false);
		initialRow.setMargin(false);
		initialRow.setSpacing(true);
		initialRow.setStyleName("padding-small-bl");
		assetInfoGridLayout.addComponent(initialRow);

		initialRow.addComponent(imageContainer);
		imageContainer.addComponent(new Embedded());
		
		FormLayout partInformationLayout = new FormLayout();
		
		initialRow.addComponent(partInformationLayout);
		
		infoTextFieldArray = new ArrayList<TextField>();
		
		if(assetInfo.size() == 0){
			
			Label noInfoLabel = new Label("No information about part: <b>" + part.getPartNo() + "</b>");
			noInfoLabel.setContentMode(ContentMode.HTML);
			partInformationLayout.addComponent(noInfoLabel);
			
		}
		else{
			int row = 1;
			FormLayout currentCol = partInformationLayout;
			initialRow.addComponent(currentCol);
			currentCol.addStyleName("padding-small-bl");
			for (Attribute attr : assetInfo.values()) {
				TextField info = new TextField();
				info.setValue(attr.getValue());
				info.setReadOnly(true);
				//info.setWidth("100%");
				info.setCaption(attr.getName()+":");
				info.setDescription(attr.getDesc());
				info.addStyleName("sub-window");
				info.addStyleName("readonly");
				currentCol.addComponent(info);
				row++;
				if(row >= 5){
					row = 1;
					currentCol = new FormLayout();
					initialRow.addComponent(currentCol);
					currentCol.addStyleName("padding-small-bl");
				}
				infoTextFieldArray.add(info);
				
			}
		}
		
		CssLayout controlButtonGroup = new CssLayout();
		controlButtonGroup.setEnabled(currentUser.isAuthorised(editPermissions));
		if(!controlButtonGroup.isEnabled()){
			controlButtonGroup.setDescription("Your account does not have permission to edit.");
		}
		controlButtonGroup.addStyleName("v-component-group");
		controlButtonGroup.addStyleName("align-bottom");
		final Button editButton = new Button("Edit");
		for(String i: currentUser.getUserProfiles()){
			editButton.addStyleName(i);
		}
		final Button saveButton = new Button("Save");
		final Button cancelButton = new Button("Cancel");
		saveButton.setEnabled(false);
		cancelButton.setEnabled(false);
		
		editButton.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {

				oldInfoTextFieldValuesArray = new ArrayList<String>();
				for(TextField textField: infoTextFieldArray){
					textField.setReadOnly(false);
					textField.addStyleName("edit");
					textField.removeStyleName("readonly");
					oldInfoTextFieldValuesArray.add(textField.getValue());
				}
				editButton.setEnabled(false);
				saveButton.setEnabled(true);
				cancelButton.setEnabled(true);
				
			}
		});
		
		saveButton.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				for (int i = 0; i < infoTextFieldArray.size(); i++) {
					oldInfoTextFieldValuesArray.add(infoTextFieldArray.get(i).getValue());
				}
				for(TextField textField: infoTextFieldArray){
					textField.setReadOnly(true);
					textField.addStyleName("readonly");
					textField.removeStyleName("edit");
				}
				editButton.setEnabled(true);
				saveButton.setEnabled(false);
				cancelButton.setEnabled(false);
				
			}
		});
		
		cancelButton.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				
				
				for (int i = 0; i < infoTextFieldArray.size(); i++) {
				
					TextField textField = infoTextFieldArray.get(i);
					textField.setValue(oldInfoTextFieldValuesArray.get(i));
					
					textField.setReadOnly(true);
					textField.addStyleName("readonly");
					textField.removeStyleName("edit");
					
					
				}
				
				editButton.setEnabled(true);
				saveButton.setEnabled(false);
				cancelButton.setEnabled(false);
				
			}
		});
		
		controlButtonGroup.addComponent(editButton);
		controlButtonGroup.addComponent(saveButton);
		controlButtonGroup.addComponent(cancelButton);
		assetInfoGridLayout.addComponent(controlButtonGroup);
		
		
		GridLayout bomInfoGridLayout = new GridLayout();
		bomInfoGridLayout.setImmediate(false);
		bomInfoGridLayout.setMargin(false);
		bomInfoGridLayout.addStyleName("padding-small");
		
		
		Label bomInfoLabel = new Label("Bill of Material");
		bomInfoLabel.addStyleName("sub-window");
		bomInfoLabel.addStyleName("heading1");
		bomInfoGridLayout.addComponent(bomInfoLabel);
		//mainLayout.addComponent(bomInformationLabel);
		
		
		
		
		if(!part.isLeaf()){
			Tree bomTree = new Tree();
			//assetsTableControlTree.setWidth("100%");
			bomTree.setSizeFull();
			bomTree.setMultiSelect(false);

			bomTree.setContainerDataSource(assetDetailsHandler.getAssetBomHierarchicalContainer(part));
	
	        for (Object itemId: bomTree.getItemIds())
	        	bomTree.expandItem(itemId);
			
			bomTree.addItemClickListener(new ItemClickListener() {
				
				@Override
				public void itemClick(ItemClickEvent event) {
					if(event.isDoubleClick()){
						((Window) event.getComponent().getUI().getWindows().toArray()[0]).close();
						new AssetDetailsHandler(new AssetDetailsView((Part) event.getItemId()),assetDetailsHandler.getModel()).show();
					}
					
				}
			});
	         
			bomInfoGridLayout.addComponent(bomTree);
			bomInfoGridLayout.addStyleName("padding-bl");
	

		}
		else{
			Label noBomLabel = new Label("<p><b>"+ part.getPartNo() + "</b> has no child components.</p>");
			noBomLabel.setContentMode(ContentMode.HTML);
			bomInfoGridLayout.addComponent(noBomLabel);
		}
		//window.setCloseShortcut(keyCode, modifiers);
		
		assetInfoWindowTabSheet.addTab(assetInfoGridLayout,"Asset information");
		assetInfoWindowTabSheet.addTab(bomInfoGridLayout,"Bill of Material");
		
		final Window window = Utils.getWindow(heading,assetInfoWindowTabSheet);		
		
		mainLayout = assetInfoWindowTabSheet;
	}
	
	public void show(){
		this.assetInfo = assetDetailsHandler.getAssetInfo(part.getPartNo());
		buildMainLayout();
		final Window window = Utils.getWindow(heading,mainLayout);
		UI.getCurrent().addWindow(window);
	}

	public void setHandler(AssetDetailsHandler assetDetailsHandler) {
		this.assetDetailsHandler = assetDetailsHandler;
		
	}

}
