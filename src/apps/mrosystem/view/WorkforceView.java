package apps.mrosystem.view;

import java.util.ArrayList;

import apps.mrosystem.controller.InventoryHandler;
import apps.mrosystem.controller.TechnicianDetailsHandler;
import apps.mrosystem.controller.WorkforceHandler;
import apps.mrosystem.domain.Technician;
import apps.mrosystem.domain.User;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container.Filter;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.data.util.filter.Or;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.VaadinSession;
import com.vaadin.server.Sizeable.Unit;
import com.vaadin.tapio.googlemaps.GoogleMap;
import com.vaadin.tapio.googlemaps.client.LatLon;
import com.vaadin.tapio.googlemaps.client.events.MarkerClickListener;
import com.vaadin.tapio.googlemaps.client.overlays.GoogleMapMarker;
import com.vaadin.ui.Component;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Tree;
import com.vaadin.ui.TreeTable;
import com.vaadin.ui.UI;
import com.vaadin.ui.Upload.ChangeListener;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

public class WorkforceView extends CustomComponent implements View{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public static final String NAME = "WORKFORCE";
	
	private HorizontalLayout mainContentContainer;
	
	@AutoGenerated
	private HorizontalLayout mainLayout;

	private SidePanel sidePanel;
	
	private String[] authorisedUsers = new String[]{"Admin","Technician","Planner","Management"};

	private User userData;

	private TabSheet tabSheet;


	protected Filter textFilter;

	private HorizontalSplitPanel viewWorkforceTab;


	private TextField searchBox;

	private VerticalLayout tableControl;

	private OptionGroup tableViewMode;

	private TreeTable workforceTable;

	private WorkforceHandler handler;

	private HorizontalSplitPanel workforceMapTab;

	private VerticalLayout workforceMapFilter;

	private GoogleMap workforceMap;

	private TreeTable workforceMapTable;

	private TextField workforceMapTableSearch;
	
	public WorkforceView() {

	}
	
	
	private HorizontalLayout unauthorisedAccess() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		setWidth("100.0%");
		setHeight("100.0%");
		
		sidePanel = new SidePanel();
		sidePanel.setActiveButton(NAME);
		sidePanel.setImmediate(false);
		sidePanel.setWidth("160px");
		sidePanel.setHeight("100.0%");
		mainLayout.addComponent(sidePanel);
		
		mainContentContainer = new HorizontalLayout();
		mainContentContainer.setImmediate(false);
		mainContentContainer.setWidth("100.0%");
		mainContentContainer.setHeight("100.0%");
		mainContentContainer.setMargin(false);
		
		Label unauthorisedLabel = new Label();
		unauthorisedLabel.setImmediate(false);
		unauthorisedLabel.setWidth("-1px");
		unauthorisedLabel.setHeight("-1px");
		unauthorisedLabel.setValue("UNAUTHORISED ACCESS. You do not have access to view this page.");
		mainContentContainer.addComponent(unauthorisedLabel);
		
		mainLayout.addComponent(mainContentContainer);
		
		mainLayout.setExpandRatio(mainContentContainer, 1.0f);
		
		return mainLayout;
	}
	public void enter(ViewChangeEvent event) {
		init();
		
	}

	private void init() {
		userData = (User) VaadinSession.getCurrent().getAttribute("userData");
		if(userData != null){
			if(userData.isAuthorised(authorisedUsers)){
				buildMainLayout();
				handler.init();
			}
			else{
				unauthorisedAccess();
			}
			
			setCompositionRoot(mainLayout);
		}
		
	}


	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// sidePanel
		sidePanel = new SidePanel();
		sidePanel.setActiveButton(NAME);
		sidePanel.setImmediate(false);
		sidePanel.setWidth("160px");
		sidePanel.setHeight("100.0%");
		mainLayout.addComponent(sidePanel);
		
		// mainContentContainer
		mainContentContainer = buildMainContentContainer();
		mainLayout.addComponent(mainContentContainer);
		
		mainLayout.setExpandRatio(mainContentContainer, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildMainContentContainer() {
		// common part: create layout
		mainContentContainer = new HorizontalLayout();
		mainContentContainer.setImmediate(false);
		mainContentContainer.setWidth("100.0%");
		mainContentContainer.setHeight("100.0%");
		mainContentContainer.setMargin(false);
				
		tabSheet = new TabSheet();
		tabSheet.setHeight(100.0f, Unit.PERCENTAGE);
/*			assetsTabSheet.addStyleName(ValoTheme.TABSHEET_FRAMED);*/
		tabSheet.addStyleName(ValoTheme.TABSHEET_PADDED_TABBAR);
		
		
		viewWorkforceTab = buildViewWorkforceTab();
		workforceMapTab = buildWorkforceMapTab();
						
		tabSheet.addTab(viewWorkforceTab, "View Workforce", FontAwesome.TABLE);
		tabSheet.addTab(workforceMapTab, "Map", FontAwesome.MAP_MARKER);

		
		mainContentContainer.addComponent(tabSheet);
		
		return mainContentContainer;
	}
	


	private HorizontalSplitPanel buildWorkforceMapTab() {
		workforceMapTab = new HorizontalSplitPanel();
		workforceMapTab.setImmediate(false);
		workforceMapTab.setWidth("100.0%");
		workforceMapTab.setHeight("100.0%");
		
		workforceMapTab.setSizeFull();
		workforceMapTab.setSplitPosition(20, Unit.PERCENTAGE);
		workforceMapTab.setMaxSplitPosition(50, Unit.PERCENTAGE);
		
		workforceMapTab.addComponent(buildWorkforceMapControl());
		workforceMapTab.addComponent(buildWorkforceMap());
		
		return workforceMapTab;
	}


	private GoogleMap buildWorkforceMap() {
		workforceMap = new GoogleMap("AIzaSyCOe-8GdvExrUOy8qzdoScoJhGRU8GYc8w", null, "english");
		workforceMap.setSizeFull();
		return workforceMap;
	}

	public void setMapMarkerClickListener(MarkerClickListener listener){
		lockUI();
		try {
			workforceMap.addMarkerClickListener(listener);
		} finally {
			unlockUI();
		}
	}
	
	public void setTechnicianMapMarkers(ArrayList<GoogleMapMarker> technicianMarkers){
		for(GoogleMapMarker marker : technicianMarkers){
			workforceMap.addMarker(marker);
		}
		UI.getCurrent().push();
	}

	private VerticalLayout buildWorkforceMapControl() {
		workforceMapFilter = new VerticalLayout();
/*		workforceMapFilter.setWidth(100f, Unit.PERCENTAGE);
		workforceMapFilter.setHeight(100f, Unit.PERCENTAGE);
*/
		
		workforceMapTableSearch = new TextField();
		workforceMapTableSearch.setInputPrompt("Search Table");
		workforceMapTableSearch.setWidth(100f, Unit.PERCENTAGE);
		workforceMapTableSearch.addStyleName("quiet");
		workforceMapTableSearch.addStyleName("small");
		workforceMapTableSearch.addStyleName("padding-small");
		
		workforceMapTableSearch.addTextChangeListener(new TextChangeListener() {
			
			@Override
			public void textChange(TextChangeEvent event) {
				if(!event.getText().equals("")){
					((HierarchicalContainer) workforceMapTable.getContainerDataSource()).removeAllContainerFilters();
					
					
					textFilter = new Or(
							new SimpleStringFilter("Firstname", event.getText(),true, false),
							new SimpleStringFilter("Surname", event.getText(),true, false),
							new SimpleStringFilter("Group", event.getText(),true, false)
							);
					HierarchicalContainer container = (HierarchicalContainer) workforceMapTable.getContainerDataSource();
					container.addContainerFilter(textFilter);

				}else{
					((HierarchicalContainer) workforceMapTable.getContainerDataSource()).removeAllContainerFilters();
				}
				
			}
		});
		
		workforceMapTable = new TreeTable();
		workforceMapTable.addStyleName("quiet");
		workforceMapTable.addStyleName("small");
		workforceMapTable.setSelectable(true);
		workforceMapTable.setMultiSelect(false);
		workforceMapTable.setImmediate(true);
		workforceMapTable.setColumnCollapsingAllowed(true);
		workforceMapTable.setWidth(100f, Unit.PERCENTAGE);
		workforceMapTable.setHeight(100f, Unit.PERCENTAGE);
		
		workforceMapFilter.addComponent(workforceMapTable);
		workforceMapFilter.addComponent(workforceMapTableSearch);
		workforceMapFilter.setExpandRatio(workforceMapTable, 1f);


		return workforceMapFilter;
	}
		
	public void setWorkforceMapTableItemClickListener(ItemClickListener listener){
		workforceMapTable.addItemClickListener(listener);
	}
	public void setWorkforceMapTableDataSource(HierarchicalContainer container){
		workforceMapTable.setContainerDataSource(container);
	}
	
	private HorizontalSplitPanel buildViewWorkforceTab() {
		// TODO Auto-generated method stub
		viewWorkforceTab = new HorizontalSplitPanel();
		viewWorkforceTab.setImmediate(false);
		viewWorkforceTab.setWidth("100.0%");
		viewWorkforceTab.setHeight("100.0%");
		
		viewWorkforceTab.setSizeFull();
		viewWorkforceTab.setSplitPosition(11, Unit.PERCENTAGE);
		viewWorkforceTab.setMaxSplitPosition(11, Unit.PERCENTAGE);
		viewWorkforceTab.setStyleName("padding-small");
		
		viewWorkforceTab.addComponent(buildWorkforceTableControl());
		viewWorkforceTab.addComponent(buildWorkforceTable());
		
		return viewWorkforceTab;
	}
	
	private VerticalLayout buildWorkforceTableControl(){
		tableControl = new VerticalLayout();
		
		searchBox = new TextField();
		searchBox.setWidth(100,Unit.PERCENTAGE);
		searchBox.setInputPrompt("Filter");
		searchBox.addTextChangeListener(new TextChangeListener() {
			@Override
			public void textChange(TextChangeEvent event) {
				if(!event.getText().equals("")){
					removeTableFilter();
					textFilter = new Or(
							new SimpleStringFilter("Firstname", event.getText(),true, false),
							new SimpleStringFilter("Surname", event.getText(),true, false),
							new SimpleStringFilter("Email", event.getText(),true, false),
							new SimpleStringFilter("Phone", event.getText(),true, false),
							new SimpleStringFilter("Base Location", event.getText(),true, false),
							new SimpleStringFilter("Group", event.getText(),true, false),
							new SimpleStringFilter("Region", event.getText(),true, false)
							);
					addTableFilter(textFilter);


				}else{
					removeTableFilter();
				}
				
			}
		});
		
		tableViewMode = new OptionGroup("View mode");
		tableViewMode.setWidth(100,Unit.PERCENTAGE);

		tableViewMode.setNullSelectionAllowed(false);
		tableViewMode.addItem("All");
		tableViewMode.addItem("Group");
		tableViewMode.addItem("Region");
		
		tableViewMode.select("All");
		
		
		tableControl.addComponent(searchBox);

		tableControl.addComponent(tableViewMode);
		
		tableControl.addStyleName("padding-small");
		
		return tableControl;
	}
	
	public void setTableViewModelValueChangeListener(ValueChangeListener listener){
		lockUI();
		try {
			tableViewMode.addValueChangeListener(listener);
		} finally {
			unlockUI();
		}
	}
	
	protected void addTableFilter(Filter filter) {
		HierarchicalContainer container = (HierarchicalContainer) workforceTable.getContainerDataSource();
		container.addContainerFilter(filter);
		
	}


	protected void removeTableFilter() {
		((HierarchicalContainer) workforceTable.getContainerDataSource()).removeAllContainerFilters();

		
	}


	public void setTableDataSource(HierarchicalContainer container){
		lockUI();
		try {
			workforceTable.setContainerDataSource(container);
		} finally {
			unlockUI();
		}
	}
	
	private TreeTable buildWorkforceTable(){
		workforceTable = new TreeTable();
		workforceTable.setSizeFull();
		workforceTable.setSelectable(true);
		workforceTable.setMultiSelect(true);
		workforceTable.setImmediate(true);
		workforceTable.setColumnCollapsingAllowed(true);
		
		return workforceTable;
	}


	public String getName() {
		// TODO Auto-generated method stub
		return NAME;
	}


	public void showWarning(String caption, String message) {
		new Notification(caption, message,Notification.Type.WARNING_MESSAGE);

		
	}
	
	
	private void unlockUI() {
		UI.getCurrent().getSession().getLockInstance().unlock();

		
	}

	private void lockUI() {
		UI.getCurrent().getSession().getLockInstance().lock();

		
	}


	public void clearFilterText() {
		searchBox.setValue("");
		removeAllTableFilters();

	}

	public void removeAllTableFilters() {
		((HierarchicalContainer) workforceTable.getContainerDataSource())
				.removeAllContainerFilters();
	}

	public void setHandler(WorkforceHandler handler){
		this.handler = handler;
	}
	
	public void setWaiting(boolean b) {
		// TODO Auto-generated method stub
		
	}


	public void centerMap(LatLon loc) {
		workforceMap.setCenter(loc);
		workforceMap.setZoom(15);
	}
}
